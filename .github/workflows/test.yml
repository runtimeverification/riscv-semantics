name: 'Test'
on:
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version-bump:
    name: 'Version Bump'
    runs-on: [self-hosted, linux, flyweight]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Configure GitHub user'
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Update version'
        run: |
          og_version=$(git show origin/${GITHUB_BASE_REF}:package/version)
          ./package/version.sh bump ${og_version}
          ./package/version.sh sub
          new_version=$(cat package/version)
          git add --update && git commit --message "Set Version: ${new_version}" || true
      - name: 'Push updates'
        run: git push origin HEAD:${GITHUB_HEAD_REF}

  code-quality-checks:
    needs: version-bump
    name: 'Code Quality Checks'
    runs-on: [self-hosted, linux, flyweight]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
      - name: 'Run code quality checks'
        run: make check
      - name: 'Run pyupgrade'
        run: make pyupgrade
      - name: 'Run unit tests'
        run: make test-unit

  integration-tests:
    needs: code-quality-checks
    name: 'Integration Tests'
    runs-on: [self-hosted, linux, normal]
    env:
      CONTAINER: riscv-integration-${{ github.sha }}
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          container-name: ${CONTAINER}
      - name: 'Build ksoroban'
        run: docker exec --user user ${CONTAINER} poetry install
      - name: 'Build semantics'
        run: docker exec --user user ${CONTAINER} make kdist-build
      - name: 'Run integration tests'
        run: docker exec --user user ${CONTAINER} make test-integration
      - name: 'Tear down Docker'
        if: always()
        run: docker stop --time=0 ${CONTAINER}
