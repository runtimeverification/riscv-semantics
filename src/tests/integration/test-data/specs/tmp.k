requires "riscv-semantics/riscv.md"

module BYTES2INT-INT2BYTES
  imports RISCV

  claim [id]:
    <instrs> #CHECK_HALT => #HALT </instrs>
    <pc> W ( 0 ) </pc>
    <mem>
      #bytes ( W1:Bytes +Bytes b"\x80\x1e#\x00\xe0\x1e#\x00\x02\x00\x00\x00\x00\x00\x00\x00\x80\x1e#\x00\xe2\x1e#\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xd4\xfb\x1f\x00\x00\x00\x00\x00X\xe4#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00g\xe6\tj\x85\xaeg\xbbr\xf3n<:\xf5O\xa5\x7fR\x0eQ\x8ch\x05\x9b\xab\xd9\x83\x1f\x19\xcd\xe0[\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00/d#\x00\x10\x01\x00\x00\x05\x00\x00\x00\rd#\x00\"\x00\x00\x00\x02\x00\x00\x00" ) #empty ( 4 ) #bytes ( Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 28 , 32 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 28 , 32 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 28 , 32 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 28 , 32 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 24 , 28 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 24 , 28 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 24 , 28 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 24 , 28 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 20 , 24 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 20 , 24 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 20 , 24 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 20 , 24 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 16 , 20 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 16 , 20 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 16 , 20 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 16 , 20 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 12 , 16 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 12 , 16 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 12 , 16 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 12 , 16 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 8 , 12 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 8 , 12 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 8 , 12 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 8 , 12 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 4 , 8 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 4 , 8 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 4 , 8 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 4 , 8 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) +Bytes Int2Bytes ( 4 , Word2UInt ( signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 0 , 4 ) , LE , Unsigned ) , signBitIdx: 32 ) <<Word W ( 24 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 0 , 4 ) , LE , Unsigned ) , signBitIdx: 32 ) &Word W ( 65280 ) <<Word W ( 8 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 0 , 4 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 8 ) &Word W ( 65280 ) |Word signExtend ( ... bits: Bytes2Int ( substrBytes ( W0:Bytes , 0 , 4 ) , LE , Unsigned ) , signBitIdx: 32 ) >>lWord W ( 24 ) ) &Int 4294967295 , LE ) ) .SparseBytes => .SparseBytes
    </mem>
    <test>
      <haltCond> ADDRESS ( W ( 0 ) ) </haltCond>
    </test>
requires lengthBytes(W0) ==Int 32 andBool lengthBytes(W1) ==Int 32
endmodule

